name: aligo MATCH API Server CI/CD

# 언제 이 파일의 내용이 실행될 것인지 정의합니다.
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행할 것을 말하고 있습니다.
on:
  push:
    branches: [ "aligo" ]
  pull_request:
    branches: [ "aligo" ]

 # 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용합니다.
permissions:
   contents: read

 # 실제 실행될 내용들을 정의합니다.
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행
    steps: # 작업 단계
      - name: Checkout source code #  단계별 이름, 구분자로 소스를 가져옴
        uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'



      - name: Set Environment - Common Prod Yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./Match-Common/src/main/resources/application-common.yml
        env:
          oauth.kakao.base-url: ${{ secrets.KAKAO_PROD_BASE_URL }}
          oauth.kakao.client-id: ${{ secrets.KAKAO_CLIENT }}
          oauth.kakao.client-secret: ${{ secrets.KAKAO_SECRET }}
          oauth.kakao.redirect-url: ${{ secrets.KAKAO_PROD_REDIRECT }}
          oauth.kakao.app-id: ${{ secrets.KAKAO_APP_ID }}
          oauth.kakao.admin-key: ${{ secrets.KAKAO_ADMIN_KEY }}
          jwt.secret: ${{ secrets.JWT_SECRET_KEY }}
          jwt.refresh: ${{ secrets.JWT_REFRESH_KEY }}
          oauth.naver.secret: ${{ secrets.NAVER_SECRET }}
          oauth.naver.client: ${{ secrets.NAVER_CLIENT }}
          oauth.naver.redirect-url: ${{ secrets.NAVER_PROD_REDIRECT}}
          sms.secret: ${{ secrets.SMS_SECRET_KEY }}
          sms.api: ${{ secrets.SMS_API_KEY }}
          sms.sender: ${{ secrets.SMS_SENDER }}
          nice.secret: ${{ secrets.NICE_PROD_SECRET_KEY}}
          nice.client: ${{ secrets.NICE_PROD_CLIENT_KEY }}
          nice.url: ${{ secrets.NICE_PROD_URL}}
          aws.access-key: ${{ secrets.AWS_S3_ACCESS_KEY }}
          aws.secret-key: ${{ secrets.AWS_S3_SECRET_KEY }}
          aws.s3.bucket: ${{ secrets.AWS_S3_BUCKET }}
          aws.s3.bucket-url: ${{ secrets.AWS_S3_BASE_URL }}
          discord.webhook.error: ${{ secrets.DISCORD_WEBHOOK_ERROR}}
          discord.webhook.alert: ${{ secrets.DISCORD_WEBHOOK_ALERT }}
          server.host: ${{ secrets.DEV_SERVER_HOST}}
          spring.password: ${{ secrets.APP_PASSWORD}}
          web.return.url: ${{ secrets.PROD_RETURN_URL }}
          match.aligo.url: ${ secrets.MATCH_ALIGO_URL }}

      - name: Set Environment Domain - Domain Prod Yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./Match-Domain/src/main/resources/application-domain-prod.yml
        env:
          spring.datasource.url: ${{ secrets.PROD_DB_URL_HOST }}
          spring.datasource.username: ${{ secrets.AWS_DB_USER_NAME }}
          spring.datasource.password: ${{ secrets.AWS_DB_PASSWORD }}
          spring.redis.host : ${{ secrets.REDIS_PROD_HOST }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew Match-Aligo:bootJar
        shell: bash


   # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
   # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/aligo_match .
          docker push ${{ secrets.DOCKER_REPO }}/aligo_match

   # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
   # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
   # 실행 시, docker-compose를 사용합니다.
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/aligo_match
            sudo docker compose up -d
            sudo docker image prune -f